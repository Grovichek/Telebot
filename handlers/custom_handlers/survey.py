from keyboards.reply.phone import request_phone
from loader import bot
from states.user_info import UserInfoState
from telebot.types import Message
from database.create_db import User


@bot.message_handler(commands=['survey'])
def survey(message: Message) -> None:
    bot.set_state(message.from_user.id, UserInfoState.first_name, message.chat.id)
    bot.send_message(message.from_user.id, f'–ü—Ä–∏–≤–µ—Ç {message.from_user.first_name}!')
    bot.send_message(message.from_user.id, f'–î–∞–≤–∞–π –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è –ø–æ–±–ª–∏–∂–µ!')
    bot.send_message(message.from_user.id, f'–Ø –∑–∞–ø—Ä–æ—à—É —É —Ç–µ–±—è –∫–æ–µ-–∫–∞–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, '
                                           f'—á—Ç–æ-–±—ã –ø–æ—Ç–æ–º –µ—ë –ø—Ä–æ–¥–∞—Ç—å –Ω–∞ —á—ë—Ä–Ω–æ–º —Ä—ã–Ω–∫–µ')
    bot.send_message(message.from_user.id, f'–î–ª—è –Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏ —Å–≤–æ—ë –∏–º—è')


@bot.message_handler(state=UserInfoState.first_name)
def get_fname(message: Message) -> None:
    if message.text.isalpha():
        if len(message.text) < 30:
            with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
                data['first name'] = message.text.capitalize()
                print(data['first name'])

            bot.reply_to(message, '–û—Ç–ª–∏—á–Ω–æ–µ –∏–º—è! üëç')
            bot.send_message(message.from_user.id, '–¢–µ–ø–µ—Ä—å —Å–∫–∞–∂–∏ –º–Ω–µ —Å–≤–æ—é —Ñ–∞–º–∏–ª–∏—é')
            bot.set_state(message.from_user.id, UserInfoState.last_name, message.chat.id)
        else:
            bot.reply_to(message, '–ù—É –Ω–µ –±—ã–≤–∞–µ—Ç —Ç–∞–∫–∏—Ö –¥–ª–∏–Ω–Ω—ã—Ö –∏–º—ë–Ω')
    else:
        bot.reply_to(message, '–¢—ã –º–µ–Ω—è –Ω–µ–¥–æ–æ—Ü–µ–Ω–∏–≤–∞–µ—à—å! üòè')
        bot.send_message(message.from_user.id, '–Ø —É–º–µ—é –æ—Ç–ª–∏—á–∞—Ç—å –±—É–∫–≤—ã –æ—Ç —Ü–∏—Ñ—Ä, –∞ –∏–º—è –Ω–µ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ü–∏—Ñ—Ä—ã! üòâ')
        bot.send_message(message.from_user.id, '–î–∞–≤–∞–π –µ—â–µ —Ä–∞–∑–æ–∫, —Ç–æ–ª—å–∫–æ –≤ —ç—Ç–æ—Ç —Ä–∞–∑ –±–µ–∑ –æ–±–º–∞–Ω–∞ üßê')


@bot.message_handler(state=UserInfoState.last_name)
def get_lname(message: Message) -> None:
    if message.text.isalpha():
        if len(message.text) < 30:
            with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
                data['last name'] = message.text.capitalize()
                print(data['last name'])

            bot.reply_to(message, '–ê–≥–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ üëç')
            bot.send_message(message.from_user.id, '–¢–µ–ø–µ—Ä—å –≤–æ–∑—Ä–∞—Å—Ç')
            bot.set_state(message.from_user.id, UserInfoState.age, message.chat.id)
        else:
            bot.reply_to(message, '–ù–µ –≤–µ—Ä—é —á—Ç–æ —É —Ç–µ–±—è —Ç–∞–∫–∞—è –¥–ª–∏–Ω–Ω–∞—è —Ñ–∞–º–∏–ª–∏—è')

    else:
        bot.reply_to(message, '–§–∞–º–∏–ª–∏—è –Ω–µ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ü–∏—Ñ—Ä—ã! üò°')


@bot.message_handler(state=UserInfoState.age)
def get_age(message: Message) -> None:
    if message.text.isdigit():
        with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
            data['age'] = int(message.text)
            print(data['age'])
        if int(message.text) > 10:
            bot.reply_to(message, '–î–∞ —Ç—ã —É–∂–µ –Ω–µ —Ä–µ–±–µ–Ω–æ–∫!')
            bot.send_message(message.from_user.id, '–≠—Ç–æ —Ö–æ—Ä–æ—à–æ üëç')
        elif int(message.text) > 120:
            bot.reply_to(message, '–¢—ã —Ç–æ—á–Ω–æ —Å –Ω–∞—à–µ–π –ø–ª–∞–Ω–µ—Ç—ã? –Ω–∞—à–∏ —Å—Ç–æ–ª—å–∫–æ –Ω–µ –∂–∏–≤—É—Ç')
        else:
            bot.reply_to(message, '–£—Ç–∏ –º–∞–ª—ã—à–æ–∫ ü•∞')
            bot.send_message(message.from_user.id, '–ß—Ç–æ –∂ –º–Ω–µ –¥–µ–ª–∞—Ç—å —Ç–æ —Å —Ç–≤–æ–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏?')
            bot.send_message(message.from_user.id, '–ù—É –ª–∞–¥–Ω–æ, —á—Ç–æ-–Ω–∏–±—É–¥—å –ø—Ä–∏–¥—É–º–∞—é üòâ')
        bot.send_message(message.from_user.id, '–ê –≤ –∫–∞–∫–æ–π —Å—Ç—Ä–∞–Ω–µ —Ç—ã –∂–∏–≤—ë—à—å?')
        bot.set_state(message.from_user.id, UserInfoState.country, message.chat.id)
    else:
        bot.reply_to(message, '–ù—É —Å–∫–æ–ª—å–∫–æ –º–æ–∂–Ω–æ —Ç–æ?')
        bot.send_message(message.from_user.id, '–ö–∞–∫ –≤–æ–∑—Ä–∞—Å—Ç –º–æ–∂–µ—Ç —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ –±—É–∫–≤? ü§¨')
        bot.send_message(message.from_user.id, '–¢–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã!')


@bot.message_handler(state=UserInfoState.country)
def get_country(message: Message) -> None:
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        data['country'] = message.text.capitalize()
        print(data['country'])

    bot.reply_to(message, '–ü–æ–Ω—è—Ç–Ω–æ')
    bot.send_message(message.from_user.id, '–ê –≥–æ—Ä–æ–¥?')
    bot.set_state(message.from_user.id, UserInfoState.city, message.chat.id)


@bot.message_handler(state=UserInfoState.city)
def get_city(message: Message) -> None:
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        data['city'] = message.text.capitalize()
        print(data['city'])

    bot.reply_to(message, '–ü–æ—á—Ç–∏ –≤—Å—ë!')
    bot.send_message(message.from_user.id, '–û—Å—Ç–∞–ª—Å—è —Ç–æ–ª—å–∫–æ —Ç–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞')
    bot.send_message(message.from_user.id, '–ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –∏ –Ω–∞ —ç—Ç–æ–º –∑–∞–∫–æ–Ω—á–∏–º', reply_markup=request_phone())
    bot.set_state(message.from_user.id, UserInfoState.phone, message.chat.id)


@bot.message_handler(content_types=['text', 'contact'], state=UserInfoState.phone)
def get_phone(message: Message) -> None:
    if message.content_type == 'contact':
        with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
            data['phone'] = message.contact.phone_number
            print(data['phone'])
            bot.send_message(message.from_user.id, '–°–ø–∞—Å–∏–±–æ –∑–∞ —Ç–≤–æ–∏ –ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ üíã')
            bot.send_message(message.from_user.id, '–Ø —Å–æ—Ö—Ä–∞–Ω—é –∏—Ö –≤ —Å–≤–æ–µ–π –±–∞–∑–µ, –∞ –∫–æ–≥–¥–∞ –±–∞–∑–∞ –ø–æ–¥–∫–æ–ø–∏—Ç—Å—è,'
                                                   '—è –µ—ë –ø—Ä–æ–¥–∞–º –∏ –Ω–∞ —Ç–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –º–æ–≥—É—Ç –Ω–∞—á–∞—Ç—å –∑–≤–æ–Ω–∏—Ç—å '
                                                   '—Ä–∞–∑–Ω—ã–µ –Ω–µ—Ö–æ—Ä–æ—à–∏–µ –ª—é–¥–∏, –Ω—É –∏–ª–∏ —Å–º—Å–∫–∏ —Å–ª–∞—Ç—å')
            bot.send_message(message.from_user.id, f'–í–æ—Ç –≤—Å—ë —á—Ç–æ —Ç—ã —Ä–∞–∑–±–æ–ª—Ç–∞–ª:\n\n'
                                                   f'–ò–º—è - {data["first name"]}\n'
                                                   f'–§–∞–º–∏–ª–∏—è - {data["last name"]}\n'
                                                   f'–í–æ–∑—Ä–∞—Å—Ç - {data["age"]}\n'
                                                   f'–°—Ç—Ä–∞–Ω–∞ - {data["country"]}\n'
                                                   f'–ì–æ—Ä–æ–¥ - {data["city"]}\n'
                                                   f'–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ - {data["phone"]}')
            try:
                User.create(user_id=message.from_user.id, fname=data['first name'], lname=data['last name'],
                            age=data['age'], country=data['country'], city=data['city'], phone=data['phone'])
            except Exception as err:
                print(err)



    else:
        bot.reply_to(message, '–ù—É –Ω–∞–∂–º–∏ —Ç—ã –Ω–∞ –∫–Ω–æ–ø–æ—á–∫—É, –Ω–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å—Å—è –∂–µ –∑–∞ —à–∞–≥ –¥–æ –∫–æ–Ω—Ü–∞!')
        bot.send_message(message.from_user.id, '–û–Ω–∞ –≤–æ–Ω —Ç–∞–º üëá, —Å–ø—Ä–∞–≤–∞ –æ—Ç –ø–æ–ª—è –≤–≤–æ–¥–∞')
